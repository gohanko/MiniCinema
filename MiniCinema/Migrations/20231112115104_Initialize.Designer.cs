// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MiniCinema.Data;

#nullable disable

namespace MiniCinema.Migrations
{
    [DbContext(typeof(MiniCinemaContext))]
    [Migration("20231112115104_Initialize")]
    partial class Initialize
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MiniCinema.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LocationAddressID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationAddressID");

                    b.ToTable("Branch");
                });

            modelBuilder.Entity("MiniCinema.Models.Hall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CinemaBranchID")
                        .HasColumnType("int");

                    b.Property<int>("SeatingConfigurationID")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CinemaBranchID");

                    b.HasIndex("SeatingConfigurationID");

                    b.ToTable("Hall");
                });

            modelBuilder.Entity("MiniCinema.Models.LocationAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateProvince")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TownCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LocationAddress");
                });

            modelBuilder.Entity("MiniCinema.Models.MovieDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RuntimeMinutes")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("MovieDetail");
                });

            modelBuilder.Entity("MiniCinema.Models.MovieSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HallID")
                        .HasColumnType("int");

                    b.Property<int>("MovieDetailID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ShowingDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HallID");

                    b.HasIndex("MovieDetailID");

                    b.ToTable("MovieSession");
                });

            modelBuilder.Entity("MiniCinema.Models.Seat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ColumnEnd")
                        .HasColumnType("int");

                    b.Property<int>("ColumnStart")
                        .HasColumnType("int");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<int>("RowEnd")
                        .HasColumnType("int");

                    b.Property<int>("RowStart")
                        .HasColumnType("int");

                    b.Property<int>("SeatTypeID")
                        .HasColumnType("int");

                    b.Property<int>("SeatingConfigurationID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeatTypeID");

                    b.HasIndex("SeatingConfigurationID");

                    b.ToTable("Seat");
                });

            modelBuilder.Entity("MiniCinema.Models.SeatType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<bool>("IsAccessible")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SeatType");
                });

            modelBuilder.Entity("MiniCinema.Models.SeatingConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ColumnSize")
                        .HasColumnType("int");

                    b.Property<int>("RowSize")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SeatingConfiguration");
                });

            modelBuilder.Entity("MiniCinema.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BookingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MovieSessionID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieSessionID");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("MiniCinema.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountPercentageApplied")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceAmount")
                        .HasColumnType("money");

                    b.Property<string>("PriceCurrency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketID")
                        .HasColumnType("int");

                    b.Property<int>("TransactionTypeID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TicketID");

                    b.HasIndex("TransactionTypeID");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("MiniCinema.Models.TransactionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TransactionType");
                });

            modelBuilder.Entity("MiniCinema.Models.Branch", b =>
                {
                    b.HasOne("MiniCinema.Models.LocationAddress", "LocationAddress")
                        .WithMany()
                        .HasForeignKey("LocationAddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LocationAddress");
                });

            modelBuilder.Entity("MiniCinema.Models.Hall", b =>
                {
                    b.HasOne("MiniCinema.Models.Branch", "CinemaBranch")
                        .WithMany()
                        .HasForeignKey("CinemaBranchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiniCinema.Models.SeatingConfiguration", "SeatingConfiguration")
                        .WithMany()
                        .HasForeignKey("SeatingConfigurationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CinemaBranch");

                    b.Navigation("SeatingConfiguration");
                });

            modelBuilder.Entity("MiniCinema.Models.MovieSession", b =>
                {
                    b.HasOne("MiniCinema.Models.Hall", "Hall")
                        .WithMany()
                        .HasForeignKey("HallID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiniCinema.Models.MovieDetail", "MovieDetail")
                        .WithMany()
                        .HasForeignKey("MovieDetailID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hall");

                    b.Navigation("MovieDetail");
                });

            modelBuilder.Entity("MiniCinema.Models.Seat", b =>
                {
                    b.HasOne("MiniCinema.Models.SeatType", "SeatType")
                        .WithMany("Seats")
                        .HasForeignKey("SeatTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiniCinema.Models.SeatingConfiguration", "SeatingConfiguration")
                        .WithMany("Seats")
                        .HasForeignKey("SeatingConfigurationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SeatType");

                    b.Navigation("SeatingConfiguration");
                });

            modelBuilder.Entity("MiniCinema.Models.Ticket", b =>
                {
                    b.HasOne("MiniCinema.Models.MovieSession", "MovieSession")
                        .WithMany()
                        .HasForeignKey("MovieSessionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MovieSession");
                });

            modelBuilder.Entity("MiniCinema.Models.Transaction", b =>
                {
                    b.HasOne("MiniCinema.Models.Ticket", "Ticket")
                        .WithMany("Transactions")
                        .HasForeignKey("TicketID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiniCinema.Models.TransactionType", "Type")
                        .WithMany()
                        .HasForeignKey("TransactionTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("MiniCinema.Models.SeatType", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("MiniCinema.Models.SeatingConfiguration", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("MiniCinema.Models.Ticket", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
